#!/bin/bash

# this function is based on the example from
# http://stackoverflow.com/questions/6119956/how-to-determine-if-git-handles-a-file-as-binary-or-as-text
# --numstat option of 'git diff' shows number of added and deleted lines in decimal
# notation. For binary files, outputs two - instead of saying 0 0.
file_is_binary() {
    binary_file_pattern=$(printf '%s\t-\t' -)
    diff_info=$(git diff --no-index --numstat /dev/null "$1")
    case "$diff_info" in "$binary_file_pattern"*) return 0 ;; esac
    return 1
}

# check size of file to determine if file is empty
file_is_empty() {
  return $(stat -c%s "$1");
}

if git-rev-parse --verify HEAD 2>/dev/null
then
        against=HEAD
else
        # Initial commit: diff against an empty tree object
        against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

exit_code=0

git diff-index --check --cached $against -- || exit_code=1

while read -r LINE; do
  rights=$(echo "${LINE}" | awk '{ print $2; }')
  hash=$(echo "${LINE}" | awk '{ print $4; }')
  filename=$(echo "${LINE}" | awk '{ print $6; }')

  # TODO: Hack to exclude symlinks
  if [ "${rights}" != "120000" ]; then
    # do not allow commiting to /lib/*, if it is a subtree directory
    case "$filename" in
      lib/* )
        filenameRelativeToLib=${filename:4}
        libSubdir=${filenameRelativeToLib%%/*}
        # if .gitignore file exists in libSubdir, consider it as a subtree directory
        if [ -f "lib/${libSubdir}/.gitignore" ]; then
          echo "$filename : file cannot be commited into a subtree directory  "
          exit_code=1
        fi
      ;;
    esac

    # check for empty string at the end of file
    if !(file_is_empty $filename) && !(file_is_binary $filename) && !(git cat-file blob $hash | tail -c1 | grep -q '^$'); then
      echo "$filename : no empty line at the end"
      exit_code=1
    fi

    # check Lua syntax
    case "$filename" in
      *\.lua | *\.rockspec )
        out=$(git show "${hash}" | luac -p - 2>&1)
        if [ "$?" != "0" ]; then
          echo "${out//stdin/${filename}}" >&2
          exit_code=1
        fi
      ;;
    esac
  fi
done <<<"$(git diff-index --cached HEAD)"

exit $exit_code
